#!/usr/bin/env php
<?php

require_once __DIR__ . "/vendor/autoload.php";

use Controllers\CarController;
use Controllers\RaceController;
use Helper\FormatEntry;
use Lib\JSON;
use Models\Car;
use Models\Race;
use Views\View;

$raceController = new RaceController();
$carController  = new CarController();

$dataCars   = JSON::getJson('dataCars');
$statusRace = JSON::getJson('dataRace')['Start'];
$reports    = JSON::getJson('report');

switch (FormatEntry::returnCommand($_SERVER['argv'])) {
    case 'adicionarCarro':
        $returnedCars = $carController->newCar(FormatEntry::returnNewCars($_SERVER['argv']), $dataCars, $statusRace);
        Car::setCars($returnedCars);
        View::successMessageNewCar();
        break;

    case 'excluirCarro':
        $returnedCars = $carController->deleteCar(FormatEntry::returnDeleteCar($_SERVER['argv']), $dataCars, $statusRace);
        Car::setCars($returnedCars);
        View::successMessageDeleteCar();
        break;

    case 'definirPosicoes':
        $returnedCars = $carController->setPosition($dataCars, $statusRace);
        Car::setCars($returnedCars);
        View::successMessageSetPosition();
        break;

    case 'exibirCarros':
        $carController->showCars($dataCars);
        break;

    case 'iniciarCorrida':
        $returnedStatusRace = $raceController->startRace($statusRace, $dataCars);
        Race::setReports([]);
        Race::setStatusRace($returnedStatusRace);
        View::successMessageStartRace();
        break;

    case 'finalizarCorrida':
        $returnedStatusRace = $raceController->finishRace($statusRace, $dataCars);
        Race::setStatusRace($returnedStatusRace);
        View::podium($dataCars);
        break;

    case 'ultrapassar':
        $returnedCars = $raceController->overtake(FormatEntry::returnOvertakeCars($_SERVER['argv']), $statusRace, $dataCars, $reports);
        Race::overtake($returnedCars);
        break;

    case 'relatorioUltrapassagens':
        $raceController->getReport($reports);
        break;

    default:
        View::errorMessageCommands();
}
